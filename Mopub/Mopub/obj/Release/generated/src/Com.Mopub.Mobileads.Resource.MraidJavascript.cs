using System;
using System.Collections.Generic;
using Android.Runtime;

namespace Com.Mopub.Mobileads.Resource {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.mopub.mobileads.resource']/class[@name='MraidJavascript']"
	[global::Android.Runtime.Register ("com/mopub/mobileads/resource/MraidJavascript", DoNotGenerateAcw=true)]
	public partial class MraidJavascript : global::Java.Lang.Object {


		// Metadata.xml XPath field reference: path="/api/package[@name='com.mopub.mobileads.resource']/class[@name='MraidJavascript']/field[@name='JAVASCRIPT_SOURCE']"
		[Register ("JAVASCRIPT_SOURCE")]
		public const string JavascriptSource = (string) "(function() {\u000A  var isIOS = (/iphone|ipad|ipod/i).test(window.navigator.userAgent.toLowerCase());\u000A  if (isIOS) {\u000A    console = {};\u000A    console.log = function(log) {\u000A      var iframe = document.createElement('iframe');\u000A      iframe.setAttribute('src', 'ios-log: ' + log);\u000A      document.documentElement.appendChild(iframe);\u000A      iframe.parentNode.removeChild(iframe);\u000A      iframe = null;\u000A    };\u000A    console.debug = console.info = console.warn = console.error = console.log;\u000A  }\u000A}());\u000A\u000A(function() {\u000A  // Establish the root mraidbridge object.\u000A  var mraidbridge = window.mraidbridge = {};\u000A\u000A  // Listeners for bridge events.\u000A  var listeners = {};\u000A\u000A  // Queue to track pending calls to the native SDK.\u000A  var nativeCallQueue = [];\u000A\u000A  // Whether a native call is currently in progress.\u000A  var nativeCallInFlight = false;\u000A\u000A  //////////////////////////////////////////////////////////////////////////////////////////////////\u000A\u000A  mraidbridge.fireReadyEvent = function() {\u000A    mraidbridge.fireEvent('ready');\u000A  };\u000A\u000A  mraidbridge.fireChangeEvent = function(properties) {\u000A    mraidbridge.fireEvent('change', properties);\u000A  };\u000A\u000A  mraidbridge.fireErrorEvent = function(message, action) {\u000A    mraidbridge.fireEvent('error', message, action);\u000A  };\u000A\u000A  mraidbridge.fireEvent = function(type) {\u000A    var ls = listeners[type];\u000A    if (ls) {\u000A      var args = Array.prototype.slice.call(arguments);\u000A      args.shift();\u000A      var l = ls.length;\u000A      for (var i = 0; i < l; i++) {\u000A        ls[i].apply(null, args);\u000A      }\u000A    }\u000A  };\u000A\u000A  mraidbridge.nativeCallComplete = function(command) {\u000A    if (nativeCallQueue.length === 0) {\u000A      nativeCallInFlight = false;\u000A      return;\u000A    }\u000A\u000A    var nextCall = nativeCallQueue.pop();\u000A    window.location = nextCall;\u000A  };\u000A\u000A  mraidbridge.executeNativeCall = function(command) {\u000A    var call = 'mraid://' + command;\u000A\u000A    var key, value;\u000A    var isFirstArgument = true;\u000A\u000A    for (var i = 1; i < arguments.length; i += 2) {\u000A      key = arguments[i];\u000A      value = arguments[i + 1];\u000A\u000A      if (value === null) continue;\u000A\u000A      if (isFirstArgument) {\u000A        call += '?';\u000A        isFirstArgument = false;\u000A      } else {\u000A        call += '&';\u000A      }\u000A\u000A      call += encodeURIComponent(key) + '=' + encodeURIComponent(value);\u000A    }\u000A\u000A    if (nativeCallInFlight) {\u000A      nativeCallQueue.push(call);\u000A    } else {\u000A      nativeCallInFlight = true;\u000A      window.location = call;\u000A    }\u000A  };\u000A\u000A  //////////////////////////////////////////////////////////////////////////////////////////////////\u000A\u000A  mraidbridge.addEventListener = function(event, listener) {\u000A    var eventListeners;\u000A    listeners[event] = listeners[event] || [];\u000A    eventListeners = listeners[event];\u000A\u000A    for (var l in eventListeners) {\u000A      // Listener already registered, so no need to add it.\u000A      if (listener === l) return;\u000A    }\u000A\u000A    eventListeners.push(listener);\u000A  };\u000A\u000A  mraidbridge.removeEventListener = function(event, listener) {\u000A    if (listeners.hasOwnProperty(event)) {\u000A      var eventListeners = listeners[event];\u000A      if (eventListeners) {\u000A        var idx = eventListeners.indexOf(listener);\u000A        if (idx !== -1) {\u000A          eventListeners.splice(idx, 1);\u000A        }\u000A      }\u000A    }\u000A  };\u000A}());\u000A\u000A(function() {\u000A  var mraid = window.mraid = {};\u000A  var bridge = window.mraidbridge;\u000A\u000A  // Constants. ////////////////////////////////////////////////////////////////////////////////////\u000A\u000A  var VERSION = mraid.VERSION = '1.0';\u000A\u000A  var STATES = mraid.STATES = {\u000A    LOADING: 'loading',     // Initial state.\u000A    DEFAULT: 'default',\u000A    EXPANDED: 'expanded',\u000A    HIDDEN: 'hidden'\u000A  };\u000A\u000A  var EVENTS = mraid.EVENTS = {\u000A    ERROR: 'error',\u000A    INFO: 'info',\u000A    READY: 'ready',\u000A    STATECHANGE: 'stateChange',\u000A    VIEWABLECHANGE: 'viewableChange'\u000A  };\u000A\u000A  var PLACEMENT_TYPES = mraid.PLACEMENT_TYPES = {\u000A    UNKNOWN: 'unknown',\u000A    INLINE: 'inline',\u000A    INTERSTITIAL: 'interstitial'\u000A  };\u000A\u000A  // External MRAID state: may be directly or indirectly modified by the ad JS. ////////////////////\u000A\u000A  // Properties which define the behavior of an expandable ad.\u000A  var expandProperties = {\u000A    width: -1,\u000A    height: -1,\u000A    useCustomClose: false,\u000A    isModal: true,\u000A    lockOrientation: false\u000A  };\u000A\u000A  var hasSetCustomSize = false;\u000A\u000A  var hasSetCustomClose = false;\u000A\u000A  var listeners = {};\u000A\u000A  // Internal MRAID state. Modified by the native SDK. /////////////////////////////////////////////\u000A\u000A  var state = STATES.LOADING;\u000A\u000A  var isViewable = false;\u000A\u000A  var screenSize = { width: -1, height: -1 };\u000A\u000A  var placementType = PLACEMENT_TYPES.UNKNOWN;\u000A\u000A  var supports = {\u000A    sms: false,\u000A    tel: false,\u000A    calendar: false,\u000A    storePicture: false,\u000A    inlineVideo: false\u000A  };\u000A\u000A  //////////////////////////////////////////////////////////////////////////////////////////////////\u000A\u000A  var EventListeners = function(event) {\u000A    this.event = event;\u000A    this.count = 0;\u000A    var listeners = {};\u000A\u000A    this.add = function(func) {\u000A      var id = String(func);\u000A      if (!listeners[id]) {\u000A        listeners[id] = func;\u000A        this.count++;\u000A      }\u000A    };\u000A\u000A    this.remove = function(func) {\u000A      var id = String(func);\u000A      if (listeners[id]) {\u000A        listeners[id] = null;\u000A        delete listeners[id];\u000A        this.count--;\u000A        return true;\u000A      } else {\u000A        return false;\u000A      }\u000A    };\u000A\u000A    this.removeAll = function() {\u000A      for (var id in listeners) {\u000A        if (listeners.hasOwnProperty(id)) this.remove(listeners[id]);\u000A      }\u000A    };\u000A\u000A    this.broadcast = function(args) {\u000A      for (var id in listeners) {\u000A        if (listeners.hasOwnProperty(id)) listeners[id].apply({}, args);\u000A      }\u000A    };\u000A\u000A    this.toString = function() {\u000A      var out = [event, ':'];\u000A      for (var id in listeners) {\u000A        if (listeners.hasOwnProperty(id)) out.push('|', id, '|');\u000A      }\u000A      return out.join('');\u000A    };\u000A  };\u000A\u000A  var broadcastEvent = function() {\u000A    var args = new Array(arguments.length);\u000A    var l = arguments.length;\u000A    for (var i = 0; i < l; i++) args[i] = arguments[i];\u000A    var event = args.shift();\u000A    if (listeners[event]) listeners[event].broadcast(args);\u000A  };\u000A\u000A  var contains = function(value, array) {\u000A    for (var i in array) {\u000A      if (array[i] === value) return true;\u000A    }\u000A    return false;\u000A  };\u000A\u000A  var clone = function(obj) {\u000A    if (obj === null) return null;\u000A    var f = function() {};\u000A    f.prototype = obj;\u000A    return new f();\u000A  };\u000A\u000A  var stringify = function(obj) {\u000A    if (typeof obj === 'object') {\u000A      var out = [];\u000A      if (obj.push) {\u000A        // Array.\u000A        for (var p in obj) out.push(obj[p]);\u000A        return '[' + out.join(',') + ']';\u000A      } else {\u000A        // Other object.\u000A        for (var p in obj) out.push(\"'\" + p + \"': \" + obj[p]);\u000A        return '{' + out.join(',') + '}';\u000A      }\u000A    } else return String(obj);\u000A  };\u000A\u000A  var trim = function(str) {\u000A    return str.replace(/^\\s+|\\s+$/g, '');\u000A  };\u000A\u000A  // Functions that will be invoked by the native SDK whenever a \"change\" event occurs.\u000A  var changeHandlers = {\u000A    state: function(val) {\u000A      if (state === STATES.LOADING) {\u000A        broadcastEvent(EVENTS.INFO, 'Native SDK initialized.');\u000A      }\u000A      state = val;\u000A      broadcastEvent(EVENTS.INFO, 'Set state to ' + stringify(val));\u000A      broadcastEvent(EVENTS.STATECHANGE, state);\u000A    },\u000A\u000A    viewable: function(val) {\u000A      isViewable = val;\u000A      broadcastEvent(EVENTS.INFO, 'Set isViewable to ' + stringify(val));\u000A      broadcastEvent(EVENTS.VIEWABLECHANGE, isViewable);\u000A    },\u000A\u000A    placementType: function(val) {\u000A      broadcastEvent(EVENTS.INFO, 'Set placementType to ' + stringify(val));\u000A      placementType = val;\u000A    },\u000A\u000A    screenSize: function(val) {\u000A      broadcastEvent(EVENTS.INFO, 'Set screenSize to ' + stringify(val));\u000A      for (var key in val) {\u000A        if (val.hasOwnProperty(key)) screenSize[key] = val[key];\u000A      }\u000A\u000A      if (!hasSetCustomSize) {\u000A        expandProperties['width'] = screenSize['width'];\u000A        expandProperties['height'] = screenSize['height'];\u000A      }\u000A    },\u000A\u000A    expandProperties: function(val) {\u000A      broadcastEvent(EVENTS.INFO, 'Merging expandProperties with ' + stringify(val));\u000A      for (var key in val) {\u000A        if (val.hasOwnProperty(key)) expandProperties[key] = val[key];\u000A      }\u000A    },\u000A\u000A    supports: function(val) {\u000A      broadcastEvent(EVENTS.INFO, 'Set supports to ' + stringify(val));\u000A        supports = val;\u000A    },\u000A  };\u000A\u000A  var validate = function(obj, validators, action, merge) {\u000A    if (!merge) {\u000A      // Check to see if any required properties are missing.\u000A      if (obj === null) {\u000A        broadcastEvent(EVENTS.ERROR, 'Required object not provided.', action);\u000A        return false;\u000A      } else {\u000A        for (var i in validators) {\u000A          if (validators.hasOwnProperty(i) && obj[i] === undefined) {\u000A            broadcastEvent(EVENTS.ERROR, 'Object is missing required property: ' + i + '.', action);\u000A            return false;\u000A          }\u000A        }\u000A      }\u000A    }\u000A\u000A    for (var prop in obj) {\u000A      var validator = validators[prop];\u000A      var value = obj[prop];\u000A      if (validator && !validator(value)) {\u000A        // Failed validation.\u000A        broadcastEvent(EVENTS.ERROR, 'Value of property ' + prop + ' is invalid.',\u000A          action);\u000A        return false;\u000A      }\u000A    }\u000A    return true;\u000A  };\u000A\u000A  var expandPropertyValidators = {\u000A    width: function(v) { return !isNaN(v) && v >= 0; },\u000A    height: function(v) { return !isNaN(v) && v >= 0; },\u000A    useCustomClose: function(v) { return (typeof v === 'boolean'); },\u000A    lockOrientation: function(v) { return (typeof v === 'boolean'); }\u000A  };\u000A\u000A  //////////////////////////////////////////////////////////////////////////////////////////////////\u000A\u000A  bridge.addEventListener('change', function(properties) {\u000A    for (var p in properties) {\u000A      if (properties.hasOwnProperty(p)) {\u000A        var handler = changeHandlers[p];\u000A        handler(properties[p]);\u000A      }\u000A    }\u000A  });\u000A\u000A  bridge.addEventListener('error', function(message, action) {\u000A    broadcastEvent(EVENTS.ERROR, message, action);\u000A  });\u000A\u000A  bridge.addEventListener('ready', function() {\u000A    broadcastEvent(EVENTS.READY);\u000A  });\u000A\u000A  //////////////////////////////////////////////////////////////////////////////////////////////////\u000A\u000A  mraid.addEventListener = function(event, listener) {\u000A    if (!event || !listener) {\u000A      broadcastEvent(EVENTS.ERROR, 'Both event and listener are required.', 'addEventListener');\u000A    } else if (!contains(event, EVENTS)) {\u000A      broadcastEvent(EVENTS.ERROR, 'Unknown MRAID event: ' + event, 'addEventListener');\u000A    } else {\u000A      if (!listeners[event]) listeners[event] = new EventListeners(event);\u000A      listeners[event].add(listener);\u000A    }\u000A  };\u000A\u000A  mraid.close = function() {\u000A    if (state === STATES.HIDDEN) {\u000A      broadcastEvent(EVENTS.ERROR, 'Ad cannot be closed when it is already hidden.',\u000A        'close');\u000A    } else bridge.executeNativeCall('close');\u000A  };\u000A\u000A  mraid.expand = function(URL) {\u000A    if (this.getState() !== STATES.DEFAULT) {\u000A      broadcastEvent(EVENTS.ERROR, 'Ad can only be expanded from the default state.', 'expand');\u000A    } else {\u000A      var args = ['expand'];\u000A\u000A      if (this.getHasSetCustomClose()) {\u000A        args = args.concat(['shouldUseCustomClose', expandProperties.useCustomClose ? 'true' : 'false']);\u000A      }\u000A\u000A      if (this.getHasSetCustomSize()) {\u000A        if (expandProperties.width >= 0 && expandProperties.height >= 0) {\u000A          args = args.concat(['w', expandProperties.width, 'h', expandProperties.height]);\u000A        }\u000A      }\u000A\u000A      if (typeof expandProperties.lockOrientation !== 'undefined') {\u000A        args = args.concat(['lockOrientation', expandProperties.lockOrientation]);\u000A      }\u000A\u000A      if (URL) {\u000A        args = args.concat(['url', URL]);\u000A      }\u000A\u000A      bridge.executeNativeCall.apply(this, args);\u000A    }\u000A  };\u000A\u000A  mraid.getHasSetCustomClose = function() {\u000A      return hasSetCustomClose;\u000A  };\u000A\u000A  mraid.getHasSetCustomSize = function() {\u000A      return hasSetCustomSize;\u000A  };\u000A\u000A  mraid.getExpandProperties = function() {\u000A    var properties = {\u000A      width: expandProperties.width,\u000A      height: expandProperties.height,\u000A      useCustomClose: expandProperties.useCustomClose,\u000A      isModal: expandProperties.isModal\u000A    };\u000A    return properties;\u000A  };\u000A\u000A  mraid.getPlacementType = function() {\u000A    return placementType;\u000A  };\u000A\u000A  mraid.getState = function() {\u000A    return state;\u000A  };\u000A\u000A  mraid.getVersion = function() {\u000A    return mraid.VERSION;\u000A  };\u000A\u000A  mraid.isViewable = function() {\u000A    return isViewable;\u000A  };\u000A\u000A  mraid.open = function(URL) {\u000A    if (!URL) broadcastEvent(EVENTS.ERROR, 'URL is required.', 'open');\u000A    else bridge.executeNativeCall('open', 'url', URL);\u000A  };\u000A\u000A  mraid.removeEventListener = function(event, listener) {\u000A    if (!event) broadcastEvent(EVENTS.ERROR, 'Event is required.', 'removeEventListener');\u000A    else {\u000A      if (listener && (!listeners[event] || !listeners[event].remove(listener))) {\u000A        broadcastEvent(EVENTS.ERROR, 'Listener not currently registered for event.',\u000A          'removeEventListener');\u000A        return;\u000A      } else if (listeners[event]) listeners[event].removeAll();\u000A\u000A      if (listeners[event] && listeners[event].count === 0) {\u000A        listeners[event] = null;\u000A        delete listeners[event];\u000A      }\u000A    }\u000A  };\u000A\u000A  mraid.setExpandProperties = function(properties) {\u000A    if (validate(properties, expandPropertyValidators, 'setExpandProperties', true)) {\u000A      if (properties.hasOwnProperty('width') || properties.hasOwnProperty('height')) {\u000A        hasSetCustomSize = true;\u000A      }\u000A\u000A      if (properties.hasOwnProperty('useCustomClose')) hasSetCustomClose = true;\u000A\u000A      var desiredProperties = ['width', 'height', 'useCustomClose', 'lockOrientation'];\u000A      var length = desiredProperties.length;\u000A      for (var i = 0; i < length; i++) {\u000A        var propname = desiredProperties[i];\u000A        if (properties.hasOwnProperty(propname)) expandProperties[propname] = properties[propname];\u000A      }\u000A    }\u000A  };\u000A\u000A  mraid.useCustomClose = function(shouldUseCustomClose) {\u000A    expandProperties.useCustomClose = shouldUseCustomClose;\u000A    hasSetCustomClose = true;\u000A    bridge.executeNativeCall('usecustomclose', 'shouldUseCustomClose', shouldUseCustomClose);\u000A  };\u000A\u000A  // MRAID 2.0 APIs ////////////////////////////////////////////////////////////////////////////////\u000A\u000A  mraid.createCalendarEvent = function(parameters) {\u000A    CalendarEventParser.initialize(parameters);\u000A    if (CalendarEventParser.parse()) {\u000A      bridge.executeNativeCall.apply(this, CalendarEventParser.arguments);\u000A    } else {\u000A      broadcastEvent(EVENTS.ERROR, CalendarEventParser.errors[0], 'createCalendarEvent');\u000A    }\u000A  };\u000A\u000A  mraid.supports = function(feature) {\u000A    return supports[feature];\u000A  };\u000A\u000A  mraid.playVideo = function(uri) {\u000A    if (!mraid.isViewable()) {\u000A      broadcastEvent(EVENTS.ERROR, 'playVideo cannot be called until the ad is viewable', 'playVideo');\u000A      return;\u000A    }\u000A\u000A    if (!uri) {\u000A      broadcastEvent(EVENTS.ERROR, 'playVideo must be called with a valid URI', 'playVideo');\u000A    } else {\u000A      bridge.executeNativeCall.apply(this, ['playVideo', 'uri', uri]);\u000A    }\u000A  };\u000A\u000A  mraid.storePicture = function(uri) {\u000A    if (!mraid.isViewable()) {\u000A      broadcastEvent(EVENTS.ERROR, 'storePicture cannot be called until the ad is viewable', 'storePicture');\u000A      return;\u000A    }\u000A\u000A    if (!uri) {\u000A      broadcastEvent(EVENTS.ERROR, 'storePicture must be called with a valid URI', 'storePicture');\u000A    } else {\u000A      bridge.executeNativeCall.apply(this, ['storePicture', 'uri', uri]);\u000A    }\u000A  };\u000A\u000A  mraid.resize = function() {\u000A    bridge.executeNativeCall('resize');\u000A  };\u000A\u000A  mraid.getResizeProperties = function() {\u000A    bridge.executeNativeCall('getResizeProperties');\u000A  };\u000A\u000A  mraid.setResizeProperties = function(resizeProperties) {\u000A    bridge.executeNativeCall('setResizeProperties', 'resizeProperties', resizeProperties);\u000A  };\u000A\u000A  mraid.getCurrentPosition = function() {\u000A    bridge.executeNativeCall('getCurrentPosition');\u000A  };\u000A\u000A  mraid.getDefaultPosition = function() {\u000A    bridge.executeNativeCall('getDefaultPosition');\u000A  };\u000A\u000A  mraid.getMaxSize = function() {\u000A    bridge.executeNativeCall('getMaxSize');\u000A  };\u000A\u000A  mraid.getScreenSize = function() {\u000A    bridge.executeNativeCall('getScreenSize');\u000A  };\u000A\u000A  var CalendarEventParser = {\u000A    initialize: function(parameters) {\u000A      this.parameters = parameters;\u000A      this.errors = [];\u000A      this.arguments = ['createCalendarEvent'];\u000A    },\u000A\u000A    parse: function() {\u000A      if (!this.parameters) {\u000A        this.errors.push('The object passed to createCalendarEvent cannot be null.');\u000A      } else {\u000A        this.parseDescription();\u000A        this.parseLocation();\u000A        this.parseSummary();\u000A        this.parseStartAndEndDates();\u000A        this.parseReminder();\u000A        this.parseRecurrence();\u000A        this.parseTransparency();\u000A      }\u000A\u000A      var errorCount = this.errors.length;\u000A      if (errorCount) {\u000A        this.arguments.length = 0;\u000A      }\u000A\u000A      return (errorCount === 0);\u000A    },\u000A\u000A    parseDescription: function() {\u000A      this._processStringValue('description');\u000A    },\u000A\u000A    parseLocation: function() {\u000A      this._processStringValue('location');\u000A    },\u000A\u000A    parseSummary: function() {\u000A      this._processStringValue('summary');\u000A    },\u000A\u000A    parseStartAndEndDates: function() {\u000A      this._processDateValue('start');\u000A      this._processDateValue('end');\u000A    },\u000A\u000A    parseReminder: function() {\u000A      var reminder = this._getParameter('reminder');\u000A      if (!reminder) {\u000A        return;\u000A      }\u000A\u000A      if (reminder < 0) {\u000A        this.arguments.push('relativeReminder');\u000A        this.arguments.push(parseInt(reminder) / 1000);\u000A      } else {\u000A        this.arguments.push('absoluteReminder');\u000A        this.arguments.push(reminder);\u000A      }\u000A    },\u000A\u000A    parseRecurrence: function() {\u000A      var recurrenceDict = this._getParameter('recurrence');\u000A      if (!recurrenceDict) {\u000A        return;\u000A      }\u000A\u000A      this.parseRecurrenceInterval(recurrenceDict);\u000A      this.parseRecurrenceFrequency(recurrenceDict);\u000A      this.parseRecurrenceEndDate(recurrenceDict);\u000A      this.parseRecurrenceArrayValue(recurrenceDict, 'daysInWeek');\u000A      this.parseRecurrenceArrayValue(recurrenceDict, 'daysInMonth');\u000A      this.parseRecurrenceArrayValue(recurrenceDict, 'daysInYear');\u000A      this.parseRecurrenceArrayValue(recurrenceDict, 'monthsInYear');\u000A    },\u000A\u000A    parseTransparency: function() {\u000A      var validValues = ['opaque', 'transparent'];\u000A\u000A      if (this.parameters.hasOwnProperty('transparency')) {\u000A        var transparency = this.parameters['transparency'];\u000A        if (contains(transparency, validValues)) {\u000A          this.arguments.push('transparency');\u000A          this.arguments.push(transparency);\u000A        } else {\u000A          this.errors.push('transparency must be opaque or transparent');\u000A        }\u000A      }\u000A    },\u000A\u000A    parseRecurrenceArrayValue: function(recurrenceDict, kind) {\u000A      if (recurrenceDict.hasOwnProperty(kind)) {\u000A        var array = recurrenceDict[kind];\u000A        if (!array || !(array instanceof Array)) {\u000A          this.errors.push(kind + ' must be an array.');\u000A        } else {\u000A          var arrayStr = array.join(',');\u000A          this.arguments.push(kind);\u000A          this.arguments.push(arrayStr);\u000A        }\u000A      }\u000A    },\u000A\u000A    parseRecurrenceInterval: function(recurrenceDict) {\u000A      if (recurrenceDict.hasOwnProperty('interval')) {\u000A        var interval = recurrenceDict['interval'];\u000A        if (!interval) {\u000A          this.errors.push('Recurrence interval cannot be null.');\u000A        } else {\u000A          this.arguments.push('interval');\u000A          this.arguments.push(interval);\u000A        }\u000A      } else {\u000A        // If a recurrence rule was specified without an interval, use a default value of 1.\u000A        this.arguments.push('interval');\u000A        this.arguments.push(1);\u000A      }\u000A    },\u000A\u000A    parseRecurrenceFrequency: function(recurrenceDict) {\u000A      if (recurrenceDict.hasOwnProperty('frequency')) {\u000A        var frequency = recurrenceDict['frequency'];\u000A        var validFrequencies = ['daily', 'weekly', 'monthly', 'yearly'];\u000A        if (contains(frequency, validFrequencies)) {\u000A          this.arguments.push('frequency');\u000A          this.arguments.push(frequency);\u000A        } else {\u000A          this.errors.push('Recurrence frequency must be one of: \"daily\", \"weekly\", \"monthly\", \"yearly\".');\u000A        }\u000A      }\u000A    },\u000A\u000A    parseRecurrenceEndDate: function(recurrenceDict) {\u000A      var expires = recurrenceDict['expires'];\u000A\u000A      if (!expires) {\u000A        return;\u000A      }\u000A\u000A      this.arguments.push('expires');\u000A      this.arguments.push(expires);\u000A    },\u000A\u000A    _getParameter: function(key) {\u000A      if (this.parameters.hasOwnProperty(key)) {\u000A        return this.parameters[key];\u000A      }\u000A\u000A      return null;\u000A    },\u000A\u000A    _processStringValue: function(kind) {\u000A      if (this.parameters.hasOwnProperty(kind)) {\u000A        var value = this.parameters[kind];\u000A        this.arguments.push(kind);\u000A        this.arguments.push(value);\u000A      }\u000A    },\u000A\u000A    _processDateValue: function(kind) {\u000A      if (this.parameters.hasOwnProperty(kind)) {\u000A        var dateString = this._getParameter(kind);\u000A        this.arguments.push(kind);\u000A        this.arguments.push(dateString);\u000A      }\u000A    },\u000A  };\u000A}());\u000A";
		internal static IntPtr java_class_handle;
		internal static IntPtr class_ref {
			get {
				return JNIEnv.FindClass ("com/mopub/mobileads/resource/MraidJavascript", ref java_class_handle);
			}
		}

		protected override IntPtr ThresholdClass {
			get { return class_ref; }
		}

		protected override global::System.Type ThresholdType {
			get { return typeof (MraidJavascript); }
		}

		protected MraidJavascript (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer) {}

		static IntPtr id_ctor;
		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.mopub.mobileads.resource']/class[@name='MraidJavascript']/constructor[@name='MraidJavascript' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public MraidJavascript () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			if (Handle != IntPtr.Zero)
				return;

			if (GetType () != typeof (MraidJavascript)) {
				SetHandle (global::Android.Runtime.JNIEnv.CreateInstance (GetType (), "()V"), JniHandleOwnership.TransferLocalRef);
				return;
			}

			if (id_ctor == IntPtr.Zero)
				id_ctor = JNIEnv.GetMethodID (class_ref, "<init>", "()V");
			SetHandle (JNIEnv.NewObject (class_ref, id_ctor), JniHandleOwnership.TransferLocalRef);
		}

	}
}
